/* soapServer.cpp
   Generated by gSOAP 2.8.17r from YrElecarDetect.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapServer.cpp ver 2.8.17r 2014-10-22 08:42:32 GMT")


extern "C" SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap *soap)
{
#ifndef WITH_FASTCGI
	unsigned int k = soap->max_keep_alive;
#endif
	do
	{
#ifndef WITH_FASTCGI
		if (soap->max_keep_alive > 0 && !--k)
			soap->keep_alive = 0;
#endif
		if (soap_begin_serve(soap))
		{	if (soap->error >= SOAP_STOP)
				continue;
			return soap->error;
		}
		if (soap_serve_request(soap) || (soap->fserveloop && soap->fserveloop(soap)))
		{
#ifdef WITH_FASTCGI
			soap_send_fault(soap);
#else
			return soap_send_fault(soap);
#endif
		}

#ifdef WITH_FASTCGI
		soap_destroy(soap);
		soap_end(soap);
	} while (1);
#else
	} while (soap->keep_alive);
#endif
	return SOAP_OK;
}

#ifndef WITH_NOSERVEREQUEST
extern "C" SOAP_FMAC5 int SOAP_FMAC6 soap_serve_request(struct soap *soap)
{
	soap_peek_element(soap);
	if (!soap_match_tag(soap, soap->tag, "ns:SendMission"))
		return soap_serve_ns__SendMission(soap);
	if (!soap_match_tag(soap, soap->tag, "ns:GetServerStatus"))
		return soap_serve_ns__GetServerStatus(soap);
	if (!soap_match_tag(soap, soap->tag, "ns:AddCamera"))
		return soap_serve_ns__AddCamera(soap);
	if (!soap_match_tag(soap, soap->tag, "ns:IfCamera"))
		return soap_serve_ns__IfCamera(soap);
	if (!soap_match_tag(soap, soap->tag, "ns:DelCamera"))
		return soap_serve_ns__DelCamera(soap);
	return soap->error = SOAP_NO_METHOD;
}
#endif

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__SendMission(struct soap *soap)
{	struct ns__SendMission soap_tmp_ns__SendMission;
	struct ns__SendMissionResponse soap_tmp_ns__SendMissionResponse;
	char soap_tmp_byte;
	soap_default_ns__SendMissionResponse(soap, &soap_tmp_ns__SendMissionResponse);
	soap_default_byte(soap, &soap_tmp_byte);
	soap_tmp_ns__SendMissionResponse.ResponseXml = &soap_tmp_byte;
	soap_default_ns__SendMission(soap, &soap_tmp_ns__SendMission);
	if (!soap_get_ns__SendMission(soap, &soap_tmp_ns__SendMission, "ns:SendMission", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns__SendMission(soap, soap_tmp_ns__SendMission.MsgXml, soap_tmp_ns__SendMissionResponse.ResponseXml);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "";
	soap_serializeheader(soap);
	soap_serialize_ns__SendMissionResponse(soap, &soap_tmp_ns__SendMissionResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__SendMissionResponse(soap, &soap_tmp_ns__SendMissionResponse, "ns:SendMissionResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__SendMissionResponse(soap, &soap_tmp_ns__SendMissionResponse, "ns:SendMissionResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__GetServerStatus(struct soap *soap)
{	struct ns__GetServerStatus soap_tmp_ns__GetServerStatus;
	struct ns__GetServerStatusResponse soap_tmp_ns__GetServerStatusResponse;
	char soap_tmp_byte;
	soap_default_ns__GetServerStatusResponse(soap, &soap_tmp_ns__GetServerStatusResponse);
	soap_default_byte(soap, &soap_tmp_byte);
	soap_tmp_ns__GetServerStatusResponse.ResponseXml = &soap_tmp_byte;
	soap_default_ns__GetServerStatus(soap, &soap_tmp_ns__GetServerStatus);
	if (!soap_get_ns__GetServerStatus(soap, &soap_tmp_ns__GetServerStatus, "ns:GetServerStatus", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns__GetServerStatus(soap, soap_tmp_ns__GetServerStatus.MsgXml, soap_tmp_ns__GetServerStatusResponse.ResponseXml);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "";
	soap_serializeheader(soap);
	soap_serialize_ns__GetServerStatusResponse(soap, &soap_tmp_ns__GetServerStatusResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__GetServerStatusResponse(soap, &soap_tmp_ns__GetServerStatusResponse, "ns:GetServerStatusResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__GetServerStatusResponse(soap, &soap_tmp_ns__GetServerStatusResponse, "ns:GetServerStatusResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__AddCamera(struct soap *soap)
{	struct ns__AddCamera soap_tmp_ns__AddCamera;
	struct ns__AddCameraResponse soap_tmp_ns__AddCameraResponse;
	char soap_tmp_byte;
	soap_default_ns__AddCameraResponse(soap, &soap_tmp_ns__AddCameraResponse);
	soap_default_byte(soap, &soap_tmp_byte);
	soap_tmp_ns__AddCameraResponse.ResponseXml = &soap_tmp_byte;
	soap_default_ns__AddCamera(soap, &soap_tmp_ns__AddCamera);
	if (!soap_get_ns__AddCamera(soap, &soap_tmp_ns__AddCamera, "ns:AddCamera", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns__AddCamera(soap, soap_tmp_ns__AddCamera.MsgXml, soap_tmp_ns__AddCameraResponse.ResponseXml);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "";
	soap_serializeheader(soap);
	soap_serialize_ns__AddCameraResponse(soap, &soap_tmp_ns__AddCameraResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__AddCameraResponse(soap, &soap_tmp_ns__AddCameraResponse, "ns:AddCameraResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__AddCameraResponse(soap, &soap_tmp_ns__AddCameraResponse, "ns:AddCameraResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__IfCamera(struct soap *soap)
{	struct ns__IfCamera soap_tmp_ns__IfCamera;
	struct ns__IfCameraResponse soap_tmp_ns__IfCameraResponse;
	char soap_tmp_byte;
	soap_default_ns__IfCameraResponse(soap, &soap_tmp_ns__IfCameraResponse);
	soap_default_byte(soap, &soap_tmp_byte);
	soap_tmp_ns__IfCameraResponse.ResponseXml = &soap_tmp_byte;
	soap_default_ns__IfCamera(soap, &soap_tmp_ns__IfCamera);
	if (!soap_get_ns__IfCamera(soap, &soap_tmp_ns__IfCamera, "ns:IfCamera", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns__IfCamera(soap, soap_tmp_ns__IfCamera.MsgXml, soap_tmp_ns__IfCameraResponse.ResponseXml);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "";
	soap_serializeheader(soap);
	soap_serialize_ns__IfCameraResponse(soap, &soap_tmp_ns__IfCameraResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__IfCameraResponse(soap, &soap_tmp_ns__IfCameraResponse, "ns:IfCameraResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__IfCameraResponse(soap, &soap_tmp_ns__IfCameraResponse, "ns:IfCameraResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__DelCamera(struct soap *soap)
{	struct ns__DelCamera soap_tmp_ns__DelCamera;
	struct ns__DelCameraResponse soap_tmp_ns__DelCameraResponse;
	char soap_tmp_byte;
	soap_default_ns__DelCameraResponse(soap, &soap_tmp_ns__DelCameraResponse);
	soap_default_byte(soap, &soap_tmp_byte);
	soap_tmp_ns__DelCameraResponse.ResponseXml = &soap_tmp_byte;
	soap_default_ns__DelCamera(soap, &soap_tmp_ns__DelCamera);
	if (!soap_get_ns__DelCamera(soap, &soap_tmp_ns__DelCamera, "ns:DelCamera", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns__DelCamera(soap, soap_tmp_ns__DelCamera.MsgXml, soap_tmp_ns__DelCameraResponse.ResponseXml);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "";
	soap_serializeheader(soap);
	soap_serialize_ns__DelCameraResponse(soap, &soap_tmp_ns__DelCameraResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__DelCameraResponse(soap, &soap_tmp_ns__DelCameraResponse, "ns:DelCameraResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__DelCameraResponse(soap, &soap_tmp_ns__DelCameraResponse, "ns:DelCameraResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapServer.cpp */
