#ifndef _IO_
#define _IO_

 #define _AFXDLL
#include <afx.h>
#include <list>

#import "msado15.dll" no_namespace rename("EOF","adoEOF")       //引入ADO类型库

using namespace::std;

struct HISTORY_STRUCT
{
	int year;
	int mon;
	int day;
	int hour;
	int min;
	int sec;
	char ip[64];
	char carNumber[32];
	char path[260];
};

//struct RESULT_STRUCT
//{
//	char ip[64];
//	char carNumber[32];
//	char path[260];
//}

class IO
{
public:
	IO(void);
	~IO(void);

	_ConnectionPtr m_pConnection;					//创建oracle connection对象

	_RecordsetPtr m_pRecordsetPtr;					//创建数据记录集

	TCHAR Ip[256];
	TCHAR Port[256];
	TCHAR User[256];
	TCHAR Psw[256];
	TCHAR DataBaseName[256];
	bool ReadFile(char* FileName);

	bool ConnectionOracleDBTXT(char*  FileName);

	bool ConnectionOracleDB(char* strConn);			//连接oracle数据库

	bool DisConnectionOracleDB(void);				//断开与oracle数据库的连接
	// 从oracle数据库中读取摄像机检测引擎的设置
#if 0
	bool ReadBatchLicensePlateInfoFromOracleDB(vector<int>& idList);								 
	// 将电动车牌检测的结果写入oracle数据库中
	void getElectricCarOracleTempNid(int *id);

	bool writeElectricCarTempPhotoToOracleDB(char *IpAddr,unsigned char *Image,long int ImageSize,int *id);

	bool writeElectricCarTempInfoToOracleDB(char *CarStr,char* Color,int Direction,char *Reliability,int *nphoto);
	// 将车牌检测的结果写入oracle数据库中
	bool writeCarDetectResultToOracleDB(char* sLNumber, char* scarColor, char* scarnumtype, char* sip, char* picture,int nsize);
	// 将人脸检测的结果写入oracle数据库中
	bool WriteTempFaceDataToOracleDB(unsigned char *picture, int nsize, char* sip, int *id);

	bool ExecuteInsertMatchCarResultProcedure(int taskid, int nid, int* matchSuccesNum, int* result);

	bool ExecuteInsertMatchVehicleResultProcedure(int taskid, int nid, int* matchSuccesNum, int* result);

	void ExecuteInsertMatchResultProcedure(char *smatchResult);

	void getHostIPaddr(CString& hostName,CString& ipAddress);
	// 更新数据记录状态
#endif
	//guan
	bool writeMatchResultVehiclePath(char *IpAddr,char *CarStr,char *path);
	bool readMatchResultVehiclePath(HISTORY_STRUCT &CarInfo);
	bool readAlarmVehicle(HISTORY_STRUCT &AlarmInfo);
	bool readAllAlarmVehicle(list<HISTORY_STRUCT>& AlarmList);
	bool readAllMatchResultVehicle(list<HISTORY_STRUCT>& MatchResultList);
	//lynn
	bool writeMatchResultVehiclePicture(char *IpAddr,char *CarStr,unsigned char *Image,long int ImageSize);
	bool readMatchResultVehicle(CString path,HISTORY_STRUCT &CarInfo);//路径格式(D:\\TEMP\\)
	bool ExecuteInsertAlarmVehicleProcedure(int nid, int *iresult, char* serror);
	bool UpdateDataState(char *table,char *str,int ID);
	//bool updateDataState(CString stablename,int nflag,int nid);
};



#endif